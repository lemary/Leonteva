#include <algorithm>
#include <iostream>
#include <vector>

class Solver {
  int n_;
  std::vector<int> parent_;
  std::vector<int> size_;

 public:
  Solver(int n) : n_(n), parent_(n), size_(n) {
    for (int i = 0; i < n; ++i) {
      parent_[i] = i;
      size_[i] = 1;
    }
  }

  int Find(int u) {
    if (u == parent_[u]) {
      return u;
    }
    return parent_[u] = Find(parent_[u]);
  }

  bool Merge(int u, int v) {
    u = Find(u);
    v = Find(v);
    if (u == v) {
      return false;
    }
    if (size_[u] < size_[v]) {
      std::swap(u, v);
    }
    parent_[v] = u;
    size_[u] += size_[v];
    return true;
  }

  std::vector<std::vector<int>> GetDisjintSets() {
    std::vector<std::vector<int>> sets(n_);
    for (int i = 0; i < n_; ++i) {
      sets[Find(i)].push_back(i);
    }
    sets.erase(
        std::remove_if(sets.begin(), sets.end(),
                       [](const std::vector<int>& v) { return v.empty(); }),
        sets.end());
    return sets;
  }
};

int main() {
  int n, m;
  std::cin >> n >> m;

  Solver solver(n);

  for (int i = 0; i < m; ++i) {
    int u, v;
    std::cin >> u >> v;
    solver.Merge(u - 1, v - 1);
  }

  std::vector<std::vector<int>> sets = solver.GetDisjintSets();

  std::cout << sets.size() << std::endl;

  for (const auto& s : sets) {
    std::cout << s.size() << "\n";
    for (int x : s) {
      std::cout << x + 1 << " ";
    }
    std::cout << std::endl;
  }
  return 0;
}
