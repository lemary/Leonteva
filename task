#include <iostream>
#include <vector>

class Solver {
    const static long long MOD = 1000 * 1000 * 1000 + 7;
    long long n, m;
    long long m_max, ans;
    std::vector<std::vector<long long>> dp;
    std::vector<long long> ch_1, ch_2;
public:
    Solver(long long n, long long m) : n(n), m(m), m_max(1 << n), ans(0) {
        dp = std::vector<std::vector<long long>>(m_max, std::vector<long long>(m, 0));
        ch_1 = std::vector<long long>(m, 0);
        ch_2 = std::vector<long long>(m, 0);
    }

    void input() {
        for (long long l = 0; l < n; ++l) {
            for (long long k = 0; k < m; ++k) {
                char a;
                std::cin >> a;

                if (a == '+') {
                    ch_1[k] += (1 << (n - l - 1));
                    ch_2[k] += (1 << (n - l - 1));
                } else if (a == '.') {
                    ch_1[k] += (1 << (n - l - 1));
                }
            }
        }
    }

    void solve() {
        initDP();
        computeDP();
        computeAnswer();
    }

    void output() {
        std::cout << ans << std::endl;
    }

private:
    void initDP() {
        for (long long i = 0; i < m_max; ++i) {
            if ((i & ch_2[0]) != ch_2[0]) {
                continue;
            }
            if ((i | ch_1[0]) != ch_1[0]) {
                continue;
            }
            dp[i][0] = 1;
        }
    }

    void computeDP() {
        for (long long j = 1; j < m; ++j) {
            for (long long i = 0; i < m_max; ++i) {
                if ((i & ch_2[j]) != ch_2[j]) {
                    continue;
                }
                if ((i | ch_1[j]) != ch_1[j]) {
                    continue;
                }

                long long m_s = i, m_rev = (1 << n) - 1 - m_s;
                long long previous = m_s % 2;
                m_s /= 2;

                bool flag = true;
                for (long long p = 0; p < n - 1; ++p) {
                    long long tek = m_s % 2;
                    if (tek == previous) flag = false;
                    m_s /= 2;
                    previous = tek;
                }

                dp[i][j] = (!flag) ? dp[m_rev][j-1] % MOD
                                   : (dp[i][j-1] + dp[m_rev][j-1]) % MOD;
            }
        }
    }

    void computeAnswer() {
        for (long long i = 0; i < m_max; ++i) {
            ans = (ans + dp[i][m-1]) % MOD;
        }
    }

};

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);

    long long n, m;
    std::cin >> n >> m;
    Solver solver(n, m);

    solver.input();
    solver.solve();
    solver.output();

    return 0;
}
