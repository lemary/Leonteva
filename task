#include <iostream>
#include <vector>
#include <algorithm>

class Task {
public:
    int resources;
    int reward;

    Task(int resources = 0, int reward = 0) : resources(resources), reward(reward) {}
};

class Solver {
private:
    std::vector<Task> tasks;
    int maxResources;
    std::vector<std::vector<int>> dp;

public:
    Solver(const std::vector<Task>& tasks, int maxResources) 
        : tasks(tasks), maxResources(maxResources) {
        dp.resize(tasks.size() + 1, std::vector<int>(maxResources + 1, 0));
    }

    void solve() {
        for (size_t i = 1; i <= tasks.size(); i++) {
            for (int j = 0; j <= maxResources; j++) {
                dp[i][j] = dp[i-1][j];
                if (j >= tasks[i-1].resources) {
                    dp[i][j] = std::max(dp[i][j], dp[i-1][j-tasks[i-1].resources] + tasks[i-1].reward);
                }
            }
        }
    }

    std::vector<int> reconstructSolution() {
        std::vector<int> chosenTasks;
        int i = tasks.size();
        int remainingResources = maxResources;

        while (i > 0) {
            if (remainingResources >= tasks[i-1].resources && 
                dp[i][remainingResources] == dp[i-1][remainingResources-tasks[i-1].resources] + tasks[i-1].reward) {
                chosenTasks.push_back(i-1);
                remainingResources -= tasks[i-1].resources;
            }
            i--;
        }
        std::reverse(chosenTasks.begin(), chosenTasks.end());

        return chosenTasks;
    }
};

std::vector<Task> readInput(int& maxResources) {
    int n;
    std::cin >> n >> maxResources;

    std::vector<Task> tasks(n);
    for (int i = 0; i < n; i++) {
        std::cin >> tasks[i].resources;
    }
    for (int i = 0; i < n; i++) {
        std::cin >> tasks[i].reward;
    }
    return tasks;
}

void printOutput(const std::vector<int>& chosenTasks) {
    for (int idx : chosenTasks) {
        std::cout << idx + 1 << " ";
    }
    std::cout << std::endl;
}

int main() {
    int maxResources;
    auto tasks = readInput(maxResources);

    Solver solver(tasks, maxResources);
    solver.solve();

    printOutput(solver.reconstructSolution());
    return 0;
}
