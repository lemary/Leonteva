#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> GetIndices(const std::vector<int> &prev, const std::vector<int> &tailIndices) {
    std::vector<int> indices;
    int idx = tailIndices.back();
    while (idx != -1) {
        indices.push_back(idx);
        idx = prev[idx];
    }
    std::reverse(indices.begin(), indices.end());
    return indices;

}

void CalculateMaxNonincreasingSubsequence(const std::vector<int> &sequence, 
std::vector<int> &prev, std::vector<int> &tails, std::vector<int> &tailIndices) {
    for (size_t i = 0; i < sequence.size(); ++i) {
        auto it = std::upper_bound(tails.begin(), tails.end(), sequence[i], std::greater<int>());
        int idx = it - tails.begin();
        
        if (it == tails.end()) {
            tails.push_back(sequence[i]);
            tailIndices.push_back(i);
        } else {
            *it = sequence[i];
            tailIndices[idx] = i;
        }

        prev[i] = idx > 0 ? tailIndices[idx - 1] : -1;
    }
}

std::vector<int> MaxNonincreasingSubsequenceIndices(const std::vector<int> &sequence) {
    std::vector<int> prev(sequence.size(), -1);
    std::vector<int> tails;
    std::vector<int> tailIndices;
    CalculateMaxNonincreasingSubsequence(sequence, prev, tails, tailIndices);
    return GetIndices(prev, tailIndices);
}

std::vector<int> ReadArray(size_t n) {
    std::vector<int> ans;
    ans.reserve(n);
    int cur;
    for (size_t i = 0; i < n; ++i) {
        std::cin >> cur;
        ans.push_back(cur);
    }
    return ans;
}

void PrintIndices(const std::vector<int> &indices) {
    std::cout << indices.size() << std::endl;
    for (int idx : indices) {
        std::cout << idx + 1 << " ";
    }
    std::cout << std::endl;
}

int main() {
    size_t n;
    std::cin >> n;
    auto arr = ReadArray(n);

    auto indices = MaxNonincreasingSubsequenceIndices(arr);
    
    PrintIndices(indices);
    return 0;
}
