#include <iostream>
#include <vector>

const long long kMod = 1000 * 1000 * 1000 + 7LL;

bool CheckRelease(size_t index, long long first, long long second) {
    return ((static_cast<long long>(index) & first) != first) || 
    ((static_cast<long long>(index) | second) != second);
}

bool NeedReverse(size_t i, size_t n) {
    size_t m_s = i / 2;
    size_t previous = i & 1;

    for (size_t p = 1; p < n; ++p) {
        size_t tek = m_s & 1;
        if (tek == previous) {
            return false;
        }
        m_s /= 2;
        previous = tek;
    }
    return true;
}

std::vector<std::vector<long long>> DynamicCalculate(size_t n, const std::vector<long long>& fullMasks, 
const std::vector<long long>& masks) {
    size_t maxMask = 1 << n;
    std::vector<std::vector<long long>> dp(maxMask, std::vector<long long>(masks.size(), 0));
    for (size_t i = 0; i < maxMask; ++i) {
        if (!CheckRelease(i, masks[0], fullMasks[0])) {
            dp[i][0] = 1;
        }
    }

    for (size_t j = 1; j < masks.size(); ++j) {
        for (size_t i = 0; i < maxMask; ++i) {
            if (CheckRelease(i, masks[j], fullMasks[j])) {
                continue;
            }
            dp[i][j] = NeedReverse(i, n) ? dp[i][j-1] + dp[maxMask - 1 - i][j-1] : dp[maxMask - 1 - i][j-1];
            dp[i][j] %= kMod;
        }
    }
    return dp;
}

long long GetVariances(size_t n, const std::vector<long long>& fullMasks, const std::vector<long long>& masks) {
    auto dp = DynamicCalculate(n, fullMasks, masks);
    size_t maxMask = 1 << n;
    long long ans = 0;
    for (size_t i = 0; i < maxMask; ++i) {
        ans += dp[i][masks.size() - 1];
        ans %= kMod;
    }
    return ans;
}

std::pair<std::vector<long long>, std::vector<long long>> ReadMap(size_t n, size_t m) {
    std::vector<long long> fullMasks(m, 0);
    std::vector<long long> masks(m, 0);
    char sym;
    for (size_t i = 0; i < n; ++i) {
        for (size_t k = 0; k < m; ++k) {
            std::cin >> sym;
            if (sym == '+') {
                masks[k] += (1 << (n - i - 1));
            }
            if (sym != '-') {
                fullMasks[k] += (1 << (n - i - 1));
            }
        }
    }
    return {fullMasks, masks};
}


int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);

    size_t n, m;
    std::cin >> n >> m;
    
    auto pr = ReadMap(n, m);
    std::cout << GetVariances(n, pr.first, pr.second) << std::endl;
    return 0;
}
