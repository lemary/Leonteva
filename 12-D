#include <algorithm>
#include <iostream>
#include <vector>

int64_t Binpow(int64_t base, int64_t pow, int64_t prime) {
  base %= prime;
  if (pow == 0) {
    return 1;
  }
  if ((pow & 1) == 0) {
    return Binpow(base * base, pow >> 1, prime);
  }
  return (Binpow(base * base, pow >> 1, prime) * base) % prime;
}

int DiscreteLogarithm(int prime, int base, int num) {
  if (num == 1) {
    return 0;
  }
  std::vector<std::pair<int, int>> vals;
  int sqrt_prime = 1;
  while (sqrt_prime * sqrt_prime < prime) {
    int value = (num * 1LL * Binpow(base, sqrt_prime, prime)) % prime;
    vals.push_back({value, sqrt_prime});
    ++sqrt_prime;
  }

  int giant = Binpow(base, sqrt_prime, prime);
  vals.push_back({(giant * 1LL * num) % prime, sqrt_prime});
  std::sort(vals.begin(), vals.end());

  for (int i = 1; i <= sqrt_prime; ++i) {
    int value = Binpow(giant, i, prime);
    auto it =
        std::lower_bound(vals.begin(), vals.end(), std::make_pair(value, 0));
    if (it != vals.end() && it->first == value) {
      return i * sqrt_prime - it->second;
    }
  }
  return -1;
}

void PrintResult(int64_t result) {
  if (result == -1) {
    std::cout << "no solution" << std::endl;
  } else {
    std::cout << result << std::endl;
  }
}

int main() {
  int prime;
  int base;
  int num;
  while (std::cin >> prime >> base >> num) {
    num %= prime;
    base %= prime;
    PrintResult(DiscreteLogarithm(prime, base, num));
  }
  return 0;
}
